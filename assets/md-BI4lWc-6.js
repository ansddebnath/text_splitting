import{aJ as m,b as p,o as i,w as n,g as t,ah as s,ad as o,f as a,v as h,x as f,T as r}from"./modules/vue-Bicpx2LX.js";import{I as g}from"./slidev/two-cols-header-CTNwUue_.js";import{u as v,f as k}from"./slidev/context-LoJ4-s6V.js";import"./index-DkBDYXOT.js";import"./modules/shiki-C2XUjZyd.js";const S={__name:"slides.md__slidev_15",setup(w){const{$clicksContext:u,$frontmatter:c}=v();return u.setup(),(x,e)=>{const l=m("click");return i(),p(g,h(f(r(k)(r(c),14))),{left:n(d=>[e[2]||(e[2]=t("ul",null,[t("li",null,"Split text at semantic boundaries where topic, intent or idea changes. Rather than by fixed token counts this preserves context."),t("li",null,[o("Langchain has recently introduced "),t("code",null,"SemanticChunker"),o(", a complete guide is attached in this slide.")])],-1)),s((i(),a("div",null,[...e[0]||(e[0]=[t("h2",null,"Benefits",-1),t("ul",null,[t("li",null,"Preserves logical flow and context"),t("li",null,"Avoids splitting mid-thought"),t("li",null,"Enables topic-aware document processing")],-1)])])),[[l,1]]),s((i(),a("div",null,[...e[1]||(e[1]=[t("h2",null,"Key Takeaway",-1),t("ul",null,[t("li",null,"Semantic chunking aligns structural segmentation with linguistic meaning,"),t("li",null,"Producing chunks optimized for summarization and retrieval tasks.")],-1)])])),[[l,2]])]),right:n(d=>[...e[3]||(e[3]=[t("div",{class:"w-full h-[95%] overflow-hidden justify-center bg-gray-100 rounded-2"},[t("iframe",{src:"https://python.langchain.com/docs/how_to/semantic-chunker/#__palette=2",class:"rounded-2 origin-top-left",style:{transform:"scale(0.6)",width:"166.67%",height:"166.67%"}})],-1)])]),default:n(()=>[e[4]||(e[4]=t("h1",null,"Semantic boundary chunking",-1))]),_:1},16)}}};export{S as default};
