import{b as a,o as r,w as l,g as n,ad as e,v as u,x as c,S as s}from"./modules/vue-CJzrtd1M.js";import{I as p}from"./slidev/default-BA8wdPvG.js";import{u as m,f as g}from"./slidev/context-CYMzQU4q.js";import"./index-B5JIHzwN.js";import"./modules/shiki-BB3fXZko.js";const _={__name:"long_content_optimization.md__slidev_8",setup(d){const{$clicksContext:i,$frontmatter:o}=m();return i.setup(),(h,t)=>(r(),a(p,u(c(s(g)(s(o),7))),{default:l(()=>[...t[0]||(t[0]=[n("h1",null,"Token limit work around",-1),n("h2",null,"3. Chunk processing:",-1),n("p",null,"Another approach for handling long texts is to break them into smaller, manageable chunks. Various chunking strategies exist for splitting text, and some of the most effective methods will be discussed in the upcoming slides. This text-splitting technique can be further enhanced by implementing a sliding window approach with overlapping buffers that preserve surrounding sentences across splits, maintaining context continuity.",-1),n("h2",null,"Key considerations during chunking:",-1),n("ul",null,[n("li",null,[n("strong",null,"Chunk size:"),e(" Balance between token limits and preserving sufficient context for meaningful understanding")]),n("li",null,[n("strong",null,"Overlap strategy:"),e(" Include overlapping tokens or sentences between consecutive chunks to maintain contextual flow")]),n("li",null,[n("strong",null,"Semantic boundaries:"),e(" Split at natural breakpoints like paragraphs, sentences, or topic boundaries rather than arbitrary positions")]),n("li",null,[n("strong",null,"Information preservation:"),e(" Ensure critical information isnâ€™t split across chunks in ways that lose meaning")]),n("li",null,[n("strong",null,"Reassembly strategy:"),e(" Plan how chunked results will be merged or synthesized for the final output")])],-1)])]),_:1},16))}};export{_ as default};
